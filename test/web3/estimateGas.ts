'use strict';

import 'mocha';
import { expect, assert } from 'chai';
import { Framework } from '@vechain/connex-framework';
import { Driver, SimpleNet, SimpleWallet } from '@vechain/connex-driver';
const Web3 = require('web3');

import { ConnexProvider } from '@index';
import { urls, soloAccounts } from '../settings';

describe('Testing estimateGas', () => {
	const net = new SimpleNet(urls.solo);
	const wallet = new SimpleWallet();
	wallet.import(soloAccounts[0]);

	let driver: Driver;
	let web3: any;

	before(async () => {
		try {
			driver = await Driver.connect(net, wallet);
			web3 = new Web3(new ConnexProvider(new Framework(driver)));
		} catch (err: any) {
			assert.fail('Initialization failed: ' + err);
		}
	})

	after(() => {
		driver.close();
	})

	it('estimate gas of deploying test contract', async () => {
		const actual = 520411;
		try {
			const estimated = await web3.eth.estimateGas({
				from: wallet.list[0].address,
				data: '0x60806040523480156200001157600080fd5b50604051620008fa380380620008fa833981810160405281019062000037919062000198565b816000819055508060019080519060200190620000569291906200005f565b50505062000347565b8280546200006d9062000299565b90600052602060002090601f016020900481019282620000915760008555620000dd565b82601f10620000ac57805160ff1916838001178555620000dd565b82800160010185558215620000dd579182015b82811115620000dc578251825591602001919060010190620000bf565b5b509050620000ec9190620000f0565b5090565b5b808211156200010b576000816000905550600101620000f1565b5090565b600062000126620001208462000226565b620001f2565b9050828152602081018484840111156200013f57600080fd5b6200014c84828562000263565b509392505050565b600082601f8301126200016657600080fd5b8151620001788482602086016200010f565b91505092915050565b60008151905062000192816200032d565b92915050565b60008060408385031215620001ac57600080fd5b6000620001bc8582860162000181565b925050602083015167ffffffffffffffff811115620001da57600080fd5b620001e88582860162000154565b9150509250929050565b6000604051905081810181811067ffffffffffffffff821117156200021c576200021b620002fe565b5b8060405250919050565b600067ffffffffffffffff821115620002445762000243620002fe565b5b601f19601f8301169050602081019050919050565b6000819050919050565b60005b838110156200028357808201518184015260208101905062000266565b8381111562000293576000848401525b50505050565b60006002820490506001821680620002b257607f821691505b60208210811415620002c957620002c8620002cf565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620003388162000259565b81146200034457600080fd5b50565b6105a380620003576000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063643719771461003b5780636d4ce63c14610057575b600080fd5b6100556004803603810190610050919061029a565b610076565b005b61005f610098565b60405161006d9291906103bc565b60405180910390f35b81600081905550806001908051906020019061009392919061017a565b505050565b60006060600a600054116100e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016100d89061039c565b60405180910390fd5b60005460018080546100f2906104b5565b80601f016020809104026020016040519081016040528092919081815260200182805461011e906104b5565b801561016b5780601f106101405761010080835404028352916020019161016b565b820191906000526020600020905b81548152906001019060200180831161014e57829003601f168201915b50505050509050915091509091565b828054610186906104b5565b90600052602060002090601f0160209004810192826101a857600085556101ef565b82601f106101c157805160ff19168380011785556101ef565b828001600101855582156101ef579182015b828111156101ee5782518255916020019190600101906101d3565b5b5090506101fc9190610200565b5090565b5b80821115610219576000816000905550600101610201565b5090565b600061023061022b8461041d565b6103ec565b90508281526020810184848401111561024857600080fd5b610253848285610473565b509392505050565b600082601f83011261026c57600080fd5b813561027c84826020860161021d565b91505092915050565b60008135905061029481610556565b92915050565b600080604083850312156102ad57600080fd5b60006102bb85828601610285565b925050602083013567ffffffffffffffff8111156102d857600080fd5b6102e48582860161025b565b9150509250929050565b60006102f98261044d565b6103038185610458565b9350610313818560208601610482565b61031c81610545565b840191505092915050565b6000610334602383610458565b91507f54657374206572726f72206d65737361676520696e20636f6e7472616374206360008301527f616c6c00000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b61039681610469565b82525050565b600060208201905081810360008301526103b581610327565b9050919050565b60006040820190506103d1600083018561038d565b81810360208301526103e381846102ee565b90509392505050565b6000604051905081810181811067ffffffffffffffff8211171561041357610412610516565b5b8060405250919050565b600067ffffffffffffffff82111561043857610437610516565b5b601f19601f8301169050602081019050919050565b600081519050919050565b600082825260208201905092915050565b6000819050919050565b82818337600083830152505050565b60005b838110156104a0578082015181840152602081019050610485565b838111156104af576000848401525b50505050565b600060028204905060018216806104cd57607f821691505b602082108114156104e1576104e06104e7565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b61055f81610469565b811461056a57600080fd5b5056fea264697066735822122025f4b19b36f334fb31b0f5706230c05a6221ace35430f45adf9789308c848bcf64736f6c634300080000330000000000000000000000000000000000000000000000000000000000000064000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000147465737420636f6e7472616374206465706c6f79000000000000000000000000',
			});

			expect(estimated).to.eql(actual + 15000);
		} catch (err: any) {
			if (!err.reason) {
				assert.fail(err);
			}
		}
	})
})